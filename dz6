#include <iostream>
#include <cmath>
using namespace std;

class Function {
protected:
    double a, b, c;
public:
    Function(double a, double b, double c = 0) : a(a), b(b), c(c) {}
    
    virtual double evaluate(double x) const = 0;
    
    friend bool isPointOnFunction(const Function& func, double x, double y);
    friend double averageValue(const Function& func, double start, double end, int steps = 1000);
};

class LinearFunction : public Function {
public:
    LinearFunction(double a, double b) : Function(a, b) {}
    
    double evaluate(double x) const override {
        return a * x + b;
    }
};

class QuadraticFunction : public Function {
public:
    QuadraticFunction(double a, double b, double c) : Function(a, b, c) {}
    
    double evaluate(double x) const override {
        return a * x * x + b * x + c;
    }
};

// Дружественная функция проверки точки
bool isPointOnFunction(const Function& func, double x, double y) {
    return abs(func.evaluate(x) - y) < 1e-6; // Сравнение с учётом погрешности
}

// Дружественная функция вычисления среднего значения
double averageValue(const Function& func, double start, double end, int steps) {
    double sum = 0;
    double step = (end - start) / steps;
    
    for (int i = 0; i <= steps; i++) {
        double x = start + i * step;
        sum += func.evaluate(x);
    }
    
    return sum / (steps + 1);
}

int main() {
    LinearFunction linear(2, 3); // y = 2x + 3
    QuadraticFunction quadratic(1, 0, -4); // y = x² - 4
    
    cout << "Точка (2,7) на линейной функции: " 
         << (isPointOnFunction(linear, 2, 7) ? "Да" : "Нет") << endl;
         
    cout << "Точка (3,5) на квадратичной функции: " 
         << (isPointOnFunction(quadratic, 3, 5) ? "Да" : "Нет") << endl;
         
    cout << "Среднее значение линейной функции на [0,5]: " 
         << averageValue(linear, 0, 5) << endl;
         
    cout << "Среднее значение квадратичной функции на [-2,2]: " 
         << averageValue(quadratic, -2, 2) << endl;
    
    return 0;
}
