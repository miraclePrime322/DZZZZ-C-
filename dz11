#include <iostream>
#include <cmath>
#include <algorithm>
using namespace std;

// Базовый класс Color
class Color {
public:
    virtual ~Color() {}
    virtual void print() const = 0;
    virtual Color* toRGB() const = 0;
    virtual Color* toCMYK() const = 0;
    virtual Color* toHSV() const = 0;
};

// Класс RGB (производный от Color)
class RGB : public Color {
private:
    int red, green, blue;

public:
    RGB(int r = 0, int g = 0, int b = 0) : red(r), green(g), blue(b) {
        clampValues();
    }

    void print() const override {
        cout << "RGB: (" << red << ", " << green << ", " << blue << ")\n";
    }

    // Преобразование в CMYK
    Color* toCMYK() const override;

    // Преобразование в HSV
    Color* toHSV() const override;

    // Преобразование в RGB (просто возвращает копию)
    Color* toRGB() const override {
        return new RGB(red, green, blue);
    }

    // Метод для смешивания цветов
    RGB mix(const RGB& other) const {
        return RGB((red + other.red) / 2,
                  (green + other.green) / 2,
                  (blue + other.blue) / 2);
    }

    // Геттеры
    int getRed() const { return red; }
    int getGreen() const { return green; }
    int getBlue() const { return blue; }

private:
    void clampValues() {
        red = max(0, min(255, red));
        green = max(0, min(255, green));
        blue = max(0, min(255, blue));
    }
};

// Класс CMYK (производный от Color)
class CMYK : public Color {
private:
    float cyan, magenta, yellow, black;

public:
    CMYK(float c = 0, float m = 0, float y = 0, float k = 0) 
        : cyan(c), magenta(m), yellow(y), black(k) {
        clampValues();
    }

    void print() const override {
        cout << "CMYK: (" << cyan << ", " << magenta << ", " 
             << yellow << ", " << black << ")\n";
    }

    // Преобразование в RGB
    Color* toRGB() const override;

    // Преобразование в HSV
    Color* toHSV() const override {
        return toRGB()->toHSV();
    }

    // Преобразование в CMYK (просто возвращает копию)
    Color* toCMYK() const override {
        return new CMYK(cyan, magenta, yellow, black);
    }

    // Метод для смешивания цветов
    CMYK mix(const CMYK& other) const {
        return CMYK((cyan + other.cyan) / 2,
                   (magenta + other.magenta) / 2,
                   (yellow + other.yellow) / 2,
                   (black + other.black) / 2);
    }

private:
    void clampValues() {
        cyan = max(0.0f, min(1.0f, cyan));
        magenta = max(0.0f, min(1.0f, magenta));
        yellow = max(0.0f, min(1.0f, yellow));
        black = max(0.0f, min(1.0f, black));
    }
};

// Класс HSV (производный от Color)
class HSV : public Color {
private:
    float hue, saturation, value;

public:
    HSV(float h = 0, float s = 0, float v = 0) : hue(h), saturation(s), value(v) {
        clampValues();
    }

    void print() const override {
        cout << "HSV: (" << hue << "°, " << saturation << "%, " << value << "%)\n";
    }

    // Преобразование в RGB
    Color* toRGB() const override;

    // Преобразование в CMYK
    Color* toCMYK() const override {
        return toRGB()->toCMYK();
    }

    // Преобразование в HSV (просто возвращает копию)
    Color* toHSV() const override {
        return new HSV(hue, saturation, value);
    }

    // Метод для смешивания цветов
    HSV mix(const HSV& other) const {
        // Специальная обработка для hue (угол на цветовом круге)
        float h;
        if (abs(hue - other.hue) > 180) {
            h = (hue + other.hue + 360) / 2;
            if (h > 360) h -= 360;
        } else {
            h = (hue + other.hue) / 2;
        }
        
        return HSV(h,
                  (saturation + other.saturation) / 2,
                  (value + other.value) / 2);
    }

private:
    void clampValues() {
        hue = fmod(hue, 360);
        if (hue < 0) hue += 360;
        saturation = max(0.0f, min(100.0f, saturation));
        value = max(0.0f, min(100.0f, value));
    }
};

// Реализация методов преобразования цветов

Color* RGB::toCMYK() const {
    float r = red / 255.0f;
    float g = green / 255.0f;
    float b = blue / 255.0f;
    
    float k = 1 - max(r, max(g, b));
    if (k == 1) return new CMYK(0, 0, 0, 1);
    
    float c = (1 - r - k) / (1 - k);
    float m = (1 - g - k) / (1 - k);
    float y = (1 - b - k) / (1 - k);
    
    return new CMYK(c, m, y, k);
}

Color* RGB::toHSV() const {
    float r = red / 255.0f;
    float g = green / 255.0f;
    float b = blue / 255.0f;
    
    float cmax = max(r, max(g, b));
    float cmin = min(r, min(g, b));
    float delta = cmax - cmin;
    
    float h = 0;
    if (delta != 0) {
        if (cmax == r) h = 60 * fmod((g - b) / delta, 6);
        else if (cmax == g) h = 60 * ((b - r) / delta + 2);
        else h = 60 * ((r - g) / delta + 4);
    }
    if (h < 0) h += 360;
    
    float s = cmax == 0 ? 0 : delta / cmax * 100;
    float v = cmax * 100;
    
    return new HSV(h, s, v);
}

Color* CMYK::toRGB() const {
    float r = 255 * (1 - cyan) * (1 - black);
    float g = 255 * (1 - magenta) * (1 - black);
    float b = 255 * (1 - yellow) * (1 - black);
    
    return new RGB(round(r), round(g), round(b));
}

Color* HSV::toRGB() const {
    float h = hue;
    float s = saturation / 100;
    float v = value / 100;
    
    float c = v * s;
    float x = c * (1 - abs(fmod(h / 60, 2) - 1));
    float m = v - c;
    
    float r, g, b;
    if (h < 60) { r = c; g = x; b = 0; }
    else if (h < 120) { r = x; g = c; b = 0; }
    else if (h < 180) { r = 0; g = c; b = x; }
    else if (h < 240) { r = 0; g = x; b = c; }
    else if (h < 300) { r = x; g = 0; b = c; }
    else { r = c; g = 0; b = x; }
    
    return new RGB(round((r + m) * 255), round((g + m) * 255), round((b + m) * 255));
}

// Демонстрация работы
int main() {
    // Создаем цвета в разных моделях
    RGB rgb1(255, 0, 0); // Красный
    CMYK cmyk1(0, 1, 1, 0); // Тоже красный
    HSV hsv1(120, 100, 100); // Зеленый
    
    cout << "Исходные цвета:\n";
    rgb1.print();
    cmyk1.print();
    hsv1.print();
    
    // Преобразования
    cout << "\nПреобразования RGB -> CMYK -> RGB:\n";
    Color* cmyk_from_rgb = rgb1.toCMYK();
    cmyk_from_rgb->print();
    Color* rgb_from_cmyk = cmyk_from_rgb->toRGB();
    rgb_from_cmyk->print();
    delete cmyk_from_rgb;
    delete rgb_from_cmyk;
    
    cout << "\nПреобразования HSV -> RGB -> HSV:\n";
    Color* rgb_from_hsv = hsv1.toRGB();
    rgb_from_hsv->print();
    Color* hsv_from_rgb = rgb_from_hsv->toHSV();
    hsv_from_rgb->print();
    delete rgb_from_hsv;
    delete hsv_from_rgb;
    
    // Смешивание цветов
    cout << "\nСмешивание цветов:\n";
    RGB rgb2(0, 0, 255); // Синий
    RGB mixed_rgb = rgb1.mix(rgb2);
    cout << "Смешанный RGB (красный + синий): ";
    mixed_rgb.print();
    
    HSV hsv2(240, 100, 100); // Синий в HSV
    HSV mixed_hsv = hsv1.mix(hsv2);
    cout << "Смешанный HSV (зеленый + синий): ";
    mixed_hsv.print();
    
    return 0;
}
