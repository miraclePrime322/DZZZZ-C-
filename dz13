#include <iostream>
#include <string>
#include <stdexcept>
#include <vector>
#include <algorithm>
#include <cctype>

using namespace std;

// Базовый интерфейс Encryptor
class Encryptor {
public:
    virtual ~Encryptor() {}
    
    // Чистые виртуальные методы
    virtual string Crypt(const string& message) = 0;
    virtual string Salt(const string& password) = 0;
    
    // Виртуальный метод для проверки входных данных
    virtual void ValidateInput(const string& input) const {
        if (input.empty()) {
            throw invalid_argument("Пустая строка недопустима");
        }
    }
};

// Шифр Атбаш
class AtbashEncryptor : public Encryptor {
public:
    string Crypt(const string& message) override {
        ValidateInput(message);
        string result;
        
        for (char c : message) {
            if (isalpha(c)) {
                if (isupper(c)) {
                    result += 'Z' - (c - 'A');
                } else {
                    result += 'z' - (c - 'a');
                }
            } else {
                result += c;
            }
        }
        
        return result;
    }
    
    string Salt(const string& password) override {
        ValidateInput(password);
        return password + "AtB";
    }
};

// Шифр Цезаря
class CaesarEncryptor : public Encryptor {
    int shift;
public:
    CaesarEncryptor(int shift = 3) : shift(shift) {
        if (shift <= 0 || shift > 25) {
            throw invalid_argument("Сдвиг должен быть между 1 и 25");
        }
    }
    
    string Crypt(const string& message) override {
        ValidateInput(message);
        string result;
        
        for (char c : message) {
            if (isalpha(c)) {
                char base = isupper(c) ? 'A' : 'a';
                result += ((c - base + shift) % 26) + base;
            } else {
                result += c;
            }
        }
        
        return result;
    }
    
    string Salt(const string& password) override {
        ValidateInput(password);
        return "CaS" + password + to_string(shift);
    }
};

// Кастомный шифр (XOR + реверс)
class CustomEncryptor : public Encryptor {
    char key;
public:
    CustomEncryptor(char key = 'X') : key(key) {
        if (!isprint(key)) {
            throw invalid_argument("Ключ должен быть печатным символом");
        }
    }
    
    string Crypt(const string& message) override {
        ValidateInput(message);
        string result = message;
        
        // XOR шифрование
        for (char& c : result) {
            c ^= key;
        }
        
        // Реверс строки
        reverse(result.begin(), result.end());
        
        return result;
    }
    
    string Salt(const string& password) override {
        ValidateInput(password);
        string salt(1, key);
        return salt + password + salt;
    }
};

// Функция для демонстрации работы
void demoEncryption(Encryptor& encryptor) {
    try {
        string message = "Hello World!";
        string password = "secret";
        
        cout << "Original: " << message << endl;
        string encrypted = encryptor.Crypt(message);
        cout << "Encrypted: " << encrypted << endl;
        
        string salted = encryptor.Salt(password);
        cout << "Password: " << password << endl;
        cout << "Salted: " << salted << endl << endl;
    }
    catch (const exception& e) {
        cerr << "Ошибка: " << e.what() << endl;
    }
}

int main() {
    try {
        vector<unique_ptr<Encryptor>> encryptors;
        
        // Создаем шифраторы
        encryptors.push_back(make_unique<AtbashEncryptor>());
        encryptors.push_back(make_unique<CaesarEncryptor>(5));
        encryptors.push_back(make_unique<CustomEncryptor>('K'));
        
        // Демонстрация работы каждого шифратора
        for (const auto& encryptor : encryptors) {
            demoEncryption(*encryptor);
        }
        
        // Тест обработки исключений
        CaesarEncryptor badEncryptor(0); // Выбросит исключение
    }
    catch (const exception& e) {
        cerr << "Ошибка при создании шифратора: " << e.what() << endl;
    }
    
    return 0;
}
